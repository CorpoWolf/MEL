// Script to generate a door with size prompts
// VRChat Profile: https://vrchat.com/home/user/usr_45f42990-f078-4589-9263-3017ae863733
// Twitter Profile: https://twitter.com/SawyerDotWolf

// Just GUI generation
proc DoorGenUI() {
    string $WinName = "PrimeWindow";
    
    if (`window -exists $WinName`) {
        deleteUI $WinName;
    }
    
    window -t "Greythorne Door Generator" -w 300 -h 150 $WinName;
        columnLayout -adj true;
        global string $DrP[]; // Door Parameters
        $DrP[0] = `textFieldGrp -l "Door Width: "`;
        $DrP[1] = `textFieldGrp -l "Door Height: "`;
        $DrP[2] = `textFieldGrp -l "Door Thickness: "`;
        button -l "Generate" -c "ExecuteDoorGen";
    showWindow $WinName;
}
DoorGenUI();

global proc ExecuteDoorGen() {
    for ($i=0; $i < 3; $i++) {
        global string $DrP[];
        InConv($DrP[$i], $i);
    }

    global float $DoorSz[];
    string $NewDoor[] = `polyCube -w $DoorSz[0] -h $DoorSz[1] -d $DoorSz[2] -n "Door"`;
    move -rpr 0 ($DoorSz[1]/2) 0;
    move -r 0 (-$DoorSz[1]/2) 0 ($NewDoor[0] + ".scalePivot") ($NewDoor[0] + ".rotatePivot");
    print("Door Generated");
    select -r ($NewDoor[0] + ".f[4]");
    doDelete;
    
    GenerateHingeSide();
}

//Inch converter
proc InConv(string $inputField, int $index) {
    global float $DoorSz[];
    string $value = `textFieldGrp -query -text $inputField`;
    string $FtIn[];

    if ($value == "") {
        $DoorSz[$index] = 12; //Defaults to 1ft
    }

    $FtIn = stringToStringArray($value,"'");
    if (size($FtIn) > 2) {
        print("Invalid Input");
    } 
    else {
        if (size($FtIn) == 1) {
            $FtIn[1] = $FtIn[0];
            $FtIn[0] = 0;
        }
        $DoorSz[$index] = ((float)$FtIn[0] * 12) + (float)$FtIn[1];
        print("Size of DoorSize[" + $index + "]: " + $DoorSz[$index] + "\n");
    }
}

//Right is positive, left is negative : X axis
proc GenerateHingeSide() {
    global float $DoorSz[];

    float $HingePosTop[] = {7.375, 39.3125, 71.25};
    float $HingeHeight = 4.5;

    float $xMain[2];
    $xMain[0] = inch($DoorSz[0]/2);
    $xMain[1] = $xMain[0] - inch(0.125);

    float $yMain[4];
    $yMain[0] = inch($DoorSz[1]);
    $yMain[1] = $yMain[0] - inch($HingePosTop[0]);
    $yMain[2] = $yMain[1] - inch($HingeHeight);
    $yMain[3] = inch(splitLine($HingePosTop[0], $HingePosTop[1], $HingeHeight, $DoorSz[1]));

    float $zMain[3];
    $zMain[0] = inch($DoorSz[2]/2);
    $zMain[1] = $zMain[0] - inch(0.5);
    $zMain[2] = -($zMain[0]);
    
    float $Vert0[3] = {$xMain[0], $yMain[0], $zMain[2]};
    float $Vert1[3] = {$xMain[0], $yMain[0], $zMain[0]};
    float $Vert2[3] = {$xMain[0], $yMain[1], $zMain[1]};
    float $Vert3[3] = {$xMain[0], $yMain[1], $zMain[2]};
    InitVert($Vert0, $Vert1, $Vert2, $Vert3);

    float $Vert4[3] = {$xMain[0], $yMain[3], $zMain[0]};
    float $Vert5[3] = {$xMain[0], $yMain[2], $zMain[1]};
    AppnVert(1, $Vert4, $Vert5);

    float $Vert6[3] = {$xMain[0], $yMain[3], $zMain[2]};
    float $Vert7[3] = {$xMain[0], $yMain[2], $zMain[2]};
    AppnVert(5, $Vert6, $Vert7);

    float $Vert8[3] = {$xMain[1], $yMain[1], $zMain[1]};
    float $Vert9[3] = {$xMain[1], $yMain[1], $zMain[2]};
    AppnVert(2, $Vert8, $Vert9);

    float $Vert10[3] = {$xMain[1], $yMain[2], $zMain[1]};
    float $Vert11[3] = {$xMain[1], $yMain[1], $zMain[1]};
    AppnVert(6, $Vert10, $Vert11);

    float $Vert12[3] = {$xMain[1], $yMain[2], $zMain[2]};
    float $Vert13[3] = {$xMain[1], $yMain[2], $zMain[1]};
    AppnVert(9, $Vert12, $Vert13);
    
    polyMergeVertex -d 0;
    select -r HingeSide;
    polyAppend -ch 1 -ed 11 -ed 16;
} 

proc InitVert(float $p0[], float $p1[], float $p2[], float $p3[]) {
    string $NewPoly[] = `polyCreateFacet -ch 1 -p $p0[0] $p0[1] $p0[2] -p $p1[0] $p1[1] $p1[2] -p $p2[0] $p2[1] $p2[2] -p $p3[0] $p3[1] $p3[2] -n "HingeSide"`;
}

proc AppnVert(int $e0, float $p0[], float $p1[]) {
    string $NewPoly[] = `polyAppend -ch 1 -ed $e0 -p $p0[0] $p0[1] $p0[2] -p $p1[0] $p1[1] $p1[2]`;
}

proc float inch(float $value) {
    return $value * 2.54;
}

proc float splitLine(float $h0, float $h1, float $hh, float $dh) {
    return $dh - ((($h1 - ($h0 + $hh))/2) + ($h0 + $hh));
}